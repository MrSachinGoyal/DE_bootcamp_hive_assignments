Data Loading
-------------

# Question 1: Download the dataset and load it into a Hive table.

-- Two datasets have been provided for this assignment:
1. Customer_demographics.csv
2. Telecom_customer_churn_data.csv  

Query:
-- In this assignment, I am creating table as well as loading data for both datasets mentioned above.

CREATE TABLE customer_demographics (
  customerID STRING,
  City STRING,
  Lat DOUBLE,
  Long DOUBLE,
  country STRING,
  iso2 STRING,
  State STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count" = "1");

-- Loading data into customer_demographics table from local file system
LOAD DATA LOCAL INPATH 'file:///home/aspiringde2306/CustomerDemographics.csv' into TABLE customer_demographics;

CREATE TABLE telecom_customer_data (
  customerID STRING,
  gender STRING,
  SeniorCitizen INT,
  Partner STRING,
  Dependents STRING,
  tenure INT,
  PhoneService STRING,
  MultipleLines STRING,
  InternetService STRING,
  OnlineSecurity STRING,
  OnlineBackup STRING,
  DeviceProtection STRING,
  TechSupport STRING,
  StreamingTV STRING,
  StreamingMovies STRING,
  Contract STRING,
  PaperlessBilling STRING,
  PaymentMethod STRING,
  MonthlyCharges DOUBLE,
  TotalCharges DOUBLE,
  Churn STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count" = "1");

-- Loading data into the telecom_customer_data table from local file system
LOAD DATA LOCAL INPATH 'file:///home/aspiringde2306/Telecom_customer_churn_data.csv' into TABLE telecom_customer_data;


Data Exploration
-----------------

# Question 2: Write a HiveQL query to find the total number of customers in the dataset?

Query:
SELECT COUNT(DISTINCT(CustomerID)) AS total_customers
FROM telecom_customer_data;

Result:
| Total_Customers |
|-----------------|
| 7043            |

Analysis:
-- There are total 7043 customers in the dataset.

# Question 3: Write a HiveQL query to find the number of customers who have churned?

Query: 
SELECT COUNT(*) AS total_churned_customers
FROM telecom_customer_data
WHERE Churn = 'Yes';

Result:
| Total_Churned_Customers |
|-------------------------|
| 1869                    |

Analysis:
-- There are 26.5% churned customers in the dataset.

# Question 4: Analyze the distribution of customers based on gender and SeniorCitizen status?

Query:
-- In SeniorCitizen Column, O implies customer is not a senior citizen and 1 implies customer is a senior citizen.

SELECT gender, 
       SeniorCitizen, 
       COUNT(*) AS count
FROM telecom_customer_data
GROUP BY gender, SeniorCitizen;

Result:
| Gender | SeniorCitizen | Count |
|--------|---------------|-------|
| Female | 0             | 2920  |
| Female | 1             | 568   |
| Male   | 0             | 2981  |
| Male   | 1             | 574   |

Analysis:
-- Approximately 16% female are senior citizens and 16% male are senior citizens.
-- Collectively 16.21% customers are senior citizens.

# Question 5: Determine the total charge to the company due to churned customers?

Query:
SELECT ROUND(SUM(TotalCharges),2) AS total_charges_to_company
FROM telecom_customer_data
WHERE Churn = 'Yes';

Result:
total_charges_to_company
-------------------------
2862926.9

Analysis:
-- From the above result, it can be concluded that company incurred a revenue loss of around 28.6 lakhs due to customers who have churned. 
   This highlights the financial repercussions of customer churn on the company.


Data Analysis
-------------

# Question 6: Write a HiveQL query to find the number of customers who have churned, grouped by their Contract type

Query:
SELECT Contract,
       COUNT(*) AS churn_customers_count
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY Contract;

Result:
| Contract        | churn_customers_count |
|-----------------|------------------------|
| Month-to-month  | 1655                   |
| One year        | 166                    |
| Two year        | 48                     |

Analysis:
-- The highest number of customers who discontinued the service opted for the Month-to-month contract type.

# Question 7: Write a HiveQL query to find the average MonthlyCharges for customers who have churned vs those who have not.

Query:
SELECT Churn,
       ROUND(AVG(MonthlyCharges), 2) AS avg_monthly_charges
FROM telecom_customer_data
GROUP BY Churn;

Result:
| churn | avg_monthly_charges |
|-------|----------------------|
| No    | 61.27                |
| Yes   | 74.44                |

Anaysis:
-- Above results shows that, on average, customers who have churned were paying more per month than those who did not churn.

# Question 8: Determine the maximum, minimum, and average tenure of the customers.

Query:
SELECT MAX(tenure) AS customers_maximum_tenure,
       MIN(tenure) AS customers_minimum_tenure,
       ROUND(AVG(tenure), 2) AS customers_avg_tenure
FROM telecom_customer_data;

Result:
| customers_maximum_tenure | customers_minimum_tenure | customers_avg_tenure |
|--------------------------|--------------------------|-----------------------|
| 72                       | 0                        | 32.37                 |

Analysis:
-- The maximum tenure of 72 months suggests that some customers have been with the company for a substantial period, indicating loyalty and potential satisfaction with the service.
-- The minimum tenure of 0 months indicates that there are customers with very short tenure, possibly indicating dissatisfaction or early discontinuation.
-- The average tenure of approximately 32.37 months suggests that, on average, customers have been using the company's service for about 2.5 years. 

# Question 9: Find out which PaymentMethod is most popular among customers.

Query:
SELECT PaymentMethod,
       COUNT(*) AS total_num_payments
FROM telecom_customer_data
GROUP BY PaymentMethod
ORDER BY total_num_payments DESC LIMIT 1;

Result:
| paymentmethod      | total_num_payments |
|---------------------|--------------------|
| Electronic check    | 2365               |

Analysis:
-- Most customers were paying via Electronic check.

# Question 10: Analyze the relationship between PaperlessBilling and churn rate.

Query:
SELECT PaperlessBilling, 
       ROUND((COUNT(*) * 100)/(SELECT COUNT(*) FROM telecom_customer_data WHERE Churn = 'Yes'), 2) AS churn_rate
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY PaperlessBilling;

Result:
| paperlessbilling | churn_rate |
|-------------------|------------|
| No                | 25.09      |
| Yes               | 74.91      |

Analysis:
-- Churn rate is higher with customers who opted for Paperless billing.


Partitioning
------------

# Question 11: Create a partitioned table by Contract and load the data from the original table.

-- To enable dynamic partitioning in Hive, set below mentioned property:
SET hive.exec.dynamic.partition = true;
SET hive.exec.dynamic.partition.mode = nonstrict;

Query:
CREATE TABLE telecom_customer_data_partitioned (
  customerID STRING,
  gender STRING,
  SeniorCitizen INT,
  Partner STRING,
  Dependents STRING,
  tenure INT,
  PhoneService STRING,
  MultipleLines STRING,
  InternetService STRING,
  OnlineSecurity STRING,
  OnlineBackup STRING,
  DeviceProtection STRING,
  TechSupport STRING,
  StreamingTV STRING,
  StreamingMovies STRING,
  PaperlessBilling STRING,
  PaymentMethod STRING,
  MonthlyCharges DOUBLE,
  TotalCharges DOUBLE,
  Churn STRING
)
PARTITIONED BY (Contract STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count" = "1");

-- Loading the data into the telecom_customer_data_partitioned table
INSERT OVERWRITE TABLE telecom_customer_data_partitioned PARTITION (Contract) 
SELECT customerID, gender, SeniorCitizen, Partner, Dependents, tenure,
       PhoneService, MultipleLines, InternetService, OnlineSecurity,
       OnlineBackup, DeviceProtection, TechSupport, StreamingTV,
       StreamingMovies, PaperlessBilling, PaymentMethod, MonthlyCharges,
       TotalCharges, Churn, Contract
FROM telecom_customer_data;

Analysis:
-- We can see that in hive warehouse directory, parititions have been created for each Contract Type.

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/telecom_customer_data_partitioned
Found 3 items
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-22 12:53 /user/hive/warehouse/hive_assignments.db/telecom_customer_data_partitioned/contract=Month-to-month
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-22 12:53 /user/hive/warehouse/hive_assignments.db/telecom_customer_data_partitioned/contract=One year
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-22 12:53 /user/hive/warehouse/hive_assignments.db/telecom_customer_data_partitioned/contract=Two year

# Question 12: Write a HiveQL query to find the number of customers who have churned in each Contract type using the partitioned table.

Query:
SELECT Contract,
       COUNT(*) AS num_churned_customers
FROM telecom_customer_data_partitioned
WHERE Churn = 'Yes'
GROUP BY Contract;

Result:
| contract        | num_churned_customers |
|-----------------|------------------------|
| Month-to-month  | 1655                   |
| One year        | 166                    |
| Two year        | 48                     |

Analysis:
-- The majority of churned customers are those who chose the Month-to-month contract.

# Question 13: Find the average MonthlyCharges for each type of Contract using the partitioned table.

Query:
SELECT Contract,
       ROUND(AVG(MonthlyCharges), 2) AS avg_monthly_charges
FROM telecom_customer_data_partitioned
GROUP BY Contract;
       
Result:
| Contract        | Avg Monthly Charges |
|-----------------|----------------------|
| Month-to-month  | 66.41                |
| One year        | 65.05                |
| Two year        | 60.8                 |

Analysis:
--  It highlights that customers with a month-to-month contract have a higher average monthly charge compared to customers with one-year or two-year contracts. 
    This insight is valuable for understanding the pricing dynamics across different contract durations.

# Question 14: Determine the maximum tenure in each Contract type partition.

Query:
SELECT Contract,
       MAX(tenure) AS maximum_tenure
FROM telecom_customer_data_partitioned
GROUP BY Contract;

Result:
| Contract        | Maximum Tenure |
|-----------------|-----------------|
| Month-to-month  | 72              |
| One year        | 72              |
| Two year        | 72              |

Analysis:
-- Irrespective of Contract type, the maximum tenure of customers is 72 months. This consistency shows uniformity in customer satisfaction and loyalty across all contract types.


Bucketing
---------

# Question 15: Create a bucketed table by tenure into 6 buckets.

Query:
-- To use Bucketing in hive, enable below property:
SET hive.enforce.bucketing = true;

CREATE TABLE telecom_data_bucketed (
  customerID STRING,
  gender STRING,
  SeniorCitizen INT,
  Partner STRING,
  Dependents STRING,
  tenure INT,
  PhoneService STRING,
  MultipleLines STRING,
  InternetService STRING,
  OnlineSecurity STRING,
  OnlineBackup STRING,
  DeviceProtection STRING,
  TechSupport STRING,
  StreamingTV STRING,
  StreamingMovies STRING,
  Contract STRING,
  PaperlessBilling STRING,
  PaymentMethod STRING,
  MonthlyCharges DOUBLE,
  TotalCharges DOUBLE,
  Churn STRING
)
CLUSTERED BY (tenure) INTO 6 BUCKETS
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count" = "1");

# Question 16: Load the data from the original table into the bucketed table.

Query:
-- Loading the data into the telecom_data_bucketed table
INSERT OVERWRITE TABLE telecom_data_bucketed SELECT * FROM telecom_customer_data;

Result:
-- We can see that 6 buckets have been created in hive warehouse directory.

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed
Found 6 items
-rw-r--r--   2 aspiringde2306 hadoop     188348 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000000_0
-rw-r--r--   2 aspiringde2306 hadoop     297665 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000001_0
-rw-r--r--   2 aspiringde2306 hadoop     133881 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000002_0
-rw-r--r--   2 aspiringde2306 hadoop     122118 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000003_0
-rw-r--r--   2 aspiringde2306 hadoop      80105 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000004_0
-rw-r--r--   2 aspiringde2306 hadoop     149523 2023-11-22 14:37 /user/hive/warehouse/hive_assignments.db/telecom_data_bucketed/000005_0

# Question 17: Write a HiveQL query to find the average MonthlyCharges for customers in each bucket.

Query:
WITH CTE AS 
(SELECT MonthlyCharges,
        CASE
            WHEN (tenure % 6) = 0 THEN 'Bucket_1'
            WHEN (tenure % 6) = 1 THEN 'Bucket_2'
            WHEN (tenure % 6) = 2 THEN 'Bucket_3'
            WHEN (tenure % 6) = 3 THEN 'Bucket_4'
            WHEN (tenure % 6) = 4 THEN 'Bucket_5'
            WHEN (tenure % 6) = 5 THEN 'Bucket_6'
        END AS Bucket
FROM telecom_data_bucketed
)

SELECT Bucket,
       ROUND(AVG(MonthlyCharges)) AS avg_monthly_charges
FROM CTE
GROUP BY Bucket;

Result:
| Bucket      | Avg_Monthly_Charges |
|-------------|----------------------|
| Bucket_1    | 69.0                 |
| Bucket_2    | 60.0                 |
| Bucket_3    | 65.0                 |
| Bucket_4    | 64.0                 |
| Bucket_5    | 66.0                 |
| Bucket_6    | 66.0                 |

Analysis:
-- The results indicate that Bucket_1 has the highest average monthly charges among all buckets, suggesting that customers in this category tend to have higher monthly charges compared to others.

# Question 18: Find the highest TotalCharges in each tenure bucket.

Query:
WITH CTE AS 
(SELECT TotalCharges,
        CASE
            WHEN (tenure % 6) = 0 THEN 'Bucket_1'
            WHEN (tenure % 6) = 1 THEN 'Bucket_2'
            WHEN (tenure % 6) = 2 THEN 'Bucket_3'
            WHEN (tenure % 6) = 3 THEN 'Bucket_4'
            WHEN (tenure % 6) = 4 THEN 'Bucket_5'
            WHEN (tenure % 6) = 5 THEN 'Bucket_6'
        END AS Bucket
FROM telecom_data_bucketed
)

SELECT Bucket,
       MAX(TotalCharges) AS highest_total_charges
FROM CTE
GROUP BY Bucket;

Result:
| Bucket     | highest_total_charges     |
|------------|---------------------------|
| Bucket_1   | 8684.8                    |
| Bucket_2   | 7839.85                   |
| Bucket_3   | 8035.95                   |
| Bucket_4   | 8182.85                   |
| Bucket_5   | 8250.0                    |
| Bucket_6   | 8564.75                   |

Analysis:
-- The result indicates that Bucket_1 has the maximum total charges among all buckets.


Performance Optimization with Joins 
-----------------------------------

# Question 19: Write HiveQL queries to join the customer churn table and the demographics table on customerID using different types of joins - common join, map join, bucket map join, 
  and sorted merge bucket join. Observe and document the performance of each join type.

Query:

-- Creating bucketed table for both datasets - customer_churn and customer_demographics

CREATE TABLE customer_demographics_bucketed (
  customerID STRING,
  City STRING,
  Lat DOUBLE,
  Long DOUBLE,
  country STRING,
  iso2 STRING,
  State STRING
)
CLUSTERED BY (customerID) SORTED BY (customerID) INTO 4 BUCKETS
STORED AS ORC
TBLPROPERTIES("skip.header.line.count" = "1");

CREATE TABLE telecom_customer_data_bucketed (
  customerID STRING,
  gender STRING,
  SeniorCitizen INT,
  Partner STRING,
  Dependents STRING,
  tenure INT,
  PhoneService STRING,
  MultipleLines STRING,
  InternetService STRING,
  OnlineSecurity STRING,
  OnlineBackup STRING,
  DeviceProtection STRING,
  TechSupport STRING,
  StreamingTV STRING,
  StreamingMovies STRING,
  Contract STRING,
  PaperlessBilling STRING,
  PaymentMethod STRING,
  MonthlyCharges DOUBLE,
  TotalCharges DOUBLE,
  Churn STRING
)
CLUSTERED BY (customerID) SORTED BY (customerID) INTO 4 BUCKETS
STORED AS ORC
TBLPROPERTIES("skip.header.line.count" = "1");

-- Loading data into the tables
INSERT OVERWRITE TABLE customer_demographics_bucketed SELECT * FROM customer_demographics;
INSERT OVERWRITE TABLE telecom_customer_data_bucketed SELECT * FROM telecom_customer_data;

-- COMMON JOIN
SELECT *
FROM customer_demographics_bucketed cd
INNER JOIN telecom_customer_data_bucketed tcd
ON cd.customerID = tcd.customerID;

Execution time -- Time taken: 20.654 seconds, Fetched: 7043 row(s)

-- MAP JOIN 
SET hive.auto.convert.join = true;
SET hive.mapjoin.smalltable.filesize = 50000000;

SELECT *
FROM customer_demographics_bucketed cd
INNER JOIN telecom_customer_data_bucketed tcd
ON cd.customerID = tcd.customerID;

Execution time -- Time taken: 20.434 seconds, Fetched: 7043 row(s)

-- BUCKET MAP JOIN 
SET hive.optimize.bucketmapjoin = true;

SELECT *
FROM customer_demographics_bucketed cd
INNER JOIN telecom_customer_data_bucketed tcd
ON cd.customerID = tcd.customerID;

Execution time -- Time taken: 19.933 seconds, Fetched: 7043 row(s)

-- SORTED MERGE BUCKET JOIN
SET hive.auto.convert.sortmerge.join = true;
SET hive.optimize.bucketmapjoin.sortedmerge = true;

Execution time -- Time taken: 20.524 seconds, Fetched: 7043 row(s)

Analysis:
-- The differences in execution times are relatively small in this example, likely because the dataset is not very large.
-- For larger datasets, the benefits of map joins, bucket map joins, and sorted merge bucket joins become more pronounced. 


Advanced Analysis
-----------------

# Question 20: Find the distribution of PaymentMethod among churned customers.

Query:
SELECT PaymentMethod,
       COUNT(*) AS count
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY PaymentMethod;

Result:
paymentmethod            | count
--------------------------|-------
Bank transfer (automatic) | 258
Credit card (automatic)   | 232
Electronic check          | 1071
Mailed check              | 308

Analysis:
-- Electronic Check is the most preferred payment option among churned customers.

# Question 21: Calculate the churn rate (percentage of customers who left) for each InternetService category.

Query:
SELECT InternetService, 
       ROUND(((COUNT(*) * 100)/ (SELECT COUNT(*) FROM telecom_customer_data WHERE Churn = 'Yes')), 2) AS churn_rate
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY InternetService;

Result:
internetservice | churn_rate
----------------|-----------
DSL             | 24.56
Fiber optic     | 69.4
No              | 6.05

Analysis:
-- The churn rate is the highest among churned customers who opted for DSL Internet Service.

# Question 22: Find the number of customers who have no dependents and have churned, grouped by Contract type.

Query:
SELECT Contract,
       COUNT(*) AS count
FROM telecom_customer_data
WHERE Dependents = 'No' AND Churn = 'Yes'
GROUP BY Contract;

Result:
contract        | count
----------------|-------
Month-to-month  | 1396
One year        | 117
Two year        | 30

Analysis:
-- The result clearly states that the highest number of customers who have no dependents and have churned are from the Month-to-month contract type.

# Question 23: Find the top 5 tenure lengths that have the highest churn rates.

Query:
SELECT tenure, 
       ROUND((100 * COUNT(*))/ (SELECT COUNT(*) FROM telecom_customer_data WHERE Churn = 'Yes'), 2) AS churn_rate
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY tenure;

Result:
| tenure | churn_rate |
|--------|------------|
|   1    |   20.33    |
|   2    |    6.58    |
|   3    |    5.03    |
|   4    |    4.44    |
|   5    |    3.42    |
|   6    |    2.14    |
|   7    |    2.73    |
|   8    |    2.25    |
|   9    |    2.46    |
|  10    |    2.41    |
|  11    |    1.66    |
|  12    |    2.03    |
|  13    |    2.03    |
|  14    |    1.28    |
|  15    |    1.98    |
|  16    |    1.5     |
|  17    |    1.39    |
|  18    |    1.28    |
|  19    |    1.02    |
|  20    |    0.96    |
|  21    |    0.91    |
|  22    |    1.44    |
|  23    |    0.7     |
|  24    |    1.23    |
|  25    |    1.23    |
|  26    |    0.8     |
|  27    |    0.7     |
|  28    |    0.64    |
|  29    |    0.8     |
|  30    |    0.86    |
|  31    |    0.86    |
|  32    |    1.02    |
|  33    |    0.75    |
|  34    |    0.64    |
|  35    |    0.8     |
|  36    |    0.54    |
|  37    |    0.8     |
|  38    |    0.7     |
|  39    |    0.75    |
|  40    |    0.7     |
|  41    |    0.75    |
|  42    |    0.75    |
|  43    |    0.8     |
|  44    |    0.32    |
|  45    |    0.32    |
|  46    |    0.64    |
|  47    |    0.75    |
|  48    |    0.48    |
|  49    |    0.8     |
|  50    |    0.54    |
|  51    |    0.43    |
|  52    |    0.43    |
|  53    |    0.75    |
|  54    |    0.7     |
|  55    |    0.48    |
|  56    |    0.54    |
|  57    |    0.43    |
|  58    |    0.59    |
|  59    |    0.43    |
|  60    |    0.32    |
|  61    |    0.43    |
|  62    |    0.27    |
|  63    |    0.21    |
|  64    |    0.21    |
|  65    |    0.48    |
|  66    |    0.7     |
|  67    |    0.54    |
|  68    |    0.48    |
|  69    |    0.43    |
|  70    |    0.59    |
|  71    |    0.32    |
|  72    |    0.32    |

Analysis:
-- Among the churned customers, the result states that customer attrition is the highest for those who use the service for just 1 month. This information can be valuable for 
   understanding the pattern of churn and potentially taking measures to address issues that may be causing customers to leave early in their tenure.

# Question 24: Calculate the average MonthlyCharges for customers who have PhoneService and have churned, grouped by Contract type.

Query:
SELECT Contract,
       ROUND(AVG(MonthlyCharges), 2) AS avg_monthly_charges
FROM telecom_customer_data
WHERE PhoneService = 'Yes' AND Churn = 'Yes'
GROUP BY Contract;

Result:
|    contract    | avg_monthly_charges |
|-----------------|----------------------|
| Month-to-month  |        76.74         |
| One year        |        88.6          |
| Two year        |        89.2          |

Analysis:
-- The result shows that among the churned customers with PhoneService, those with a month-to-month contract have the lowest average monthly charges, 
   while customers with two-year contracts have the highest average monthly charges. 

# Question 25: Identify which InternetService type is most associated with churned customers.

Query:
SELECT InternetService,
       COUNT(*) AS churned_customers_count
FROM telecom_customer_data
GROUP BY InternetService
ORDER BY churned_customers_count DESC LIMIT 1;

Result:
| InternetService | ChurnedCustomersCount |
|------------------|------------------------|
| Fiber optic      |          3096          |

Analysis:
-- The outcome indicates that the majority of customers who terminated the service belonged to the Fiber optic Internet service category.

# Question 26: Determine if customers with a partner have a lower churn rate compared to those without.

Query:
SELECT Partner,
       ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM telecom_customer_data WHERE Churn = 'Yes'), 2) AS churn_rate
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY Partner;

Result:
| Partner | ChurnRate |
|---------|-----------|
|   No    |   64.21   |
|   Yes   |   35.79   |

Analysis:
-- The outcome indicates that customers without partners have a higher churn rate compared to those with partners. 

# Question 27: Analyze the relationship between MultipleLines and churn rate.

Query:
SELECT MultipleLines,
       ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM telecom_customer_data WHERE Churn = 'Yes'), 2) AS churn_rate
FROM telecom_customer_data
WHERE Churn = 'Yes'
GROUP BY MultipleLines;

Result:
| MultipleLines     | ChurnRate |
|---------------------|-----------|
| No                  |   45.43   |
| No phone service    |    9.1    |
| Yes                |   45.48   |

Analysis: 
-- Customers without phone service have the lowest churn rate. Customers with or without Multiple Lines have relatively similar churn rates.







































































































































































