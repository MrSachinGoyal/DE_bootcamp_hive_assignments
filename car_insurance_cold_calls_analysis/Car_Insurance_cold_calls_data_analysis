Data Loading
------------

# Question 1: Load the data into a Hive table. Create an external table with the given schema and load the data into the table from a text file or HDFS path.

Query:
CREATE EXTERNAL TABLE car_insurance_cold_calls
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ','
STORED AS TextFile
LOCATION '/input_data/'
TBLPROPERTIES ("skip.header.line.count"="1");


Data Exploration
-----------------

# Question 2:  How many records are there in the dataset?

-- to print header of the table, we have to enable below property:
SET hive.cli.print.header = true;

Query:
SELECT COUNT(*) AS total_records 
FROM car_insurance_cold_calls;

Analysis: 
-- There are 4000 records in the given dataset.

# Question 3: How many unique job categories are there?

Query:
SELECT COUNT(DISTINCT(Job)) AS job_categories 
FROM car_insurance_cold_calls;

Analysis: 
-- There are 12 unique job categories in the dataset.

# Question 4: What is the age distribution of customers in the dataset? Provide a breakdown by age group: 18-30, 31-45, 46-60, 61+.

Query:
WITH age_grp AS (
SELECT 
CASE WHEN Age >= 18 AND Age <= 30 THEN '18-30'
     WHEN Age >= 31 AND Age <= 45 THEN '31-45'
     WHEN Age >= 46 AND Age <= 60 THEN '46-60'
ELSE '61+'
END AS Age_group
FROM car_insurance_cold_calls
) 

SELECT Age_group, COUNT(*) AS age_distribution 
FROM age_grp
GROUP BY Age_group;

Result:
| age_group | age_distribution |
|-----------|-------------------|
| 18-30     | 678               |
| 31-45     | 2003              |
| 46-60     | 1129              |
| 61+       | 190               |

Analysis:
-- Based on the results, the majority of customers in the campaign fall within the age group of 31-45, with 2,003 customers.


# Question 5: Determine the number of unique 'Outcome' values and their respective counts.

Query: 
SELECT Outcome, COUNT(*) AS count
FROM car_insurance_cold_calls
GROUP BY Outcome;

Result:
| outcome | count |
|---------|-------|
| NA      | 3042  |
| failure | 437   |
| other   | 195   |
| success | 326   |

Analysis:
-- From the above results, it can be concluded that the most frequent outcome is NA with a count of 3042 occurences. It suggests that a significant portion of the outcomes for cold calls are not recorded.
   
# Question 6: Find the number of customers who have both a car loan and home insurance?

Query:
SELECT COUNT(*) FROM car_insurance_cold_calls
WHERE (carloan = 1) AND (HHInsurance = 1);

Analysis:
-- There are 322 customers in the dataset who have both a car loan and home insurance.


Aggregations
------------

# Question 7: What is the average, minimum, and maximum balance for each job category?

Query: 
SELECT Job, 
       ROUND(AVG(balance),2) AS avg_balance,
       MIN(balance) AS min_balance,
       MAX(balance) AS max_balance
FROM car_insurance_cold_calls
GROUP BY Job
ORDER BY avg_balance DESC, max_balance DESC;

Result:
| Job            | avg_balance | min_balance | max_balance |
|----------------|-------------|-------------|-------------|
| NA             | 1129.63     | -295        | 4465        |
| admin.         | 1212.04     | -982        | 19213       |
| blue-collar    | 1216.96     | -931        | 21522       |
| entrepreneur   | 1689.15     | -799        | 27624       |
| housemaid      | 859.72      | -278        | 4312        |
| management     | 2135.26     | -1246       | 98417       |
| retired        | 2267.39     | -1206       | 37127       |
| self-employed  | 1964.59     | -3058       | 52587       |
| services       | 851.42      | -1730       | 11516       |
| student        | 1420.84     | -679        | 23878       |
| technician     | 1414.69     | -1317       | 45248       |
| unemployed     | 1423.02     | -581        | 17747       |

Analysis:
-- Management and retired professionals have the highest average balances across all job categories with 2135.26 and 2267.39, respectively.
-- Self employed people have the lowest minimum balance among job categories with -3058.
-- Management professionals have the highest maximum balance among job categories, reaching 98,417. 

# Question 8: Find the total number of customers with and without car insurance?

Query:
SELECT CarInsurance, 
       COUNT(*) AS num_customers
FROM car_insurance_cold_calls
GROUP BY CarInsurance;

Result:
-- O means No and 1 means YES.

| carinsurance | num_customers |
|--------------|---------------|
| 0            | 2396          |
| 1            | 1604          |

Analysis:
-- Approximately 40% people bought the car insurance whereas 60% denied.

# Question 9: Count the number of customers for each communication type?

Query:
SELECT (Communication),
       COUNT(*) AS total_customers
FROM car_insurance_cold_calls
GROUP BY Communication;

Result:
| communication | total_customers |
|---------------|------------------|
| NA            | 902              |
| cellular      | 2831             |
| telephone     | 267              |

Analysis:
-- Approximately 71% of the customers were contacted via cellular communication like mobiles, smartphones, etc.

# Question 10: Calculate the sum of 'Balance' for each 'Communication' type?

Query:
SELECT Communication, 
       SUM(Balance) AS total_balance
FROM car_insurance_cold_calls
GROUP BY Communication;

Result:
| communication | total_balance |
|---------------|---------------|
| NA            | 1091772       |
| cellular      | 4464294       |
| telephone     | 575683        |

Analysis:
-- Cellular communication has the highest total balance among the specified communication methods. 

# Question 11: Count the number of 'PrevAttempts' for each 'Outcome' type?

Query:
SELECT Outcome,
       COUNT(PrevAttempts) AS prev_attempts_count
FROM car_insurance_cold_calls
GROUP BY Outcome;

Result:
| outcome | prev_attempts_count |
|---------|----------------------|
| NA      | 3042                 |
| failure | 437                  |
| other   | 195                  |
| success | 326                  |

Analysis:
-- From the above results, it can be concluded that nearly 76% of previous attempts had information missing or not available.
-- 10% of previous attempts resulted in failures whereas 8% resulted in success.

# Question 12: Calculate the average 'NoOfContacts' for people with and without 'CarInsurance'.

Query:
SELECT CarInsurance, 
       ROUND(AVG(NoOfContacts),2) AS avg_num_contacts
FROM car_insurance_cold_calls
GROUP BY CarInsurance;

Result:
-- O means No and 1 means YES.

| carinsurance | avg_num_contacts |
|--------------|------------------|
| 0            | 2.9              |
| 1            | 2.18             |

Analysis:
-- The average number of contacts is smaller for customers who bought car insurance compared to those who did not. This suggests that, on average, customers who eventually purchased car 
   insurance required fewer contacts during the campaign.


Partitioning and Bucketing
--------------------------

# Question 13: Create a partitioned table on 'Education' and 'Marital' status. Load data from the original table to this new partitioned table

-- To enable dynamic partitioning in Hive, set below mentioned property:
SET hive.exec.dynamic.partition = true;
SET hive.exec.dynamic.partition.mode = nonstrict;

Query:
CREATE TABLE car_insurance_multilevel_partitioned
(  id INT,
   Age INT,
   Job STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
PARTITIONED BY (Education STRING, Marital STRING)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ','
STORED AS TextFile
TBLPROPERTIES ("skip.header.line.count"="1");

-- Loading data into the car_insurance_multilevel_partitioned table
INSERT OVERWRITE TABLE car_insurance_multilevel_partitioned PARTITION (Education, Marital) 
SELECT id, Age, Job, Default, Balance, HHInsurance, CarLoan, Communication, 
       LastContactDay, LastContactMonth, NoOfContacts, DaysPassed, PrevAttempts, Outcome, CallStart, 
       CallEnd, CarInsurance, Education, Marital 
FROM car_insurance_cold_calls;

Analysis:
-- We can see that in hive warehouse directory, parititions have been created for each education category.
aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_multilevel_partitioned
Found 4 items
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 11:02 /user/hive/warehouse/hive_assignments.db/car_insurance_multilevel_partitioned/education=NA
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 11:02 /user/hive/warehouse/hive_assignments.db/car_insurance_multilevel_partitioned/education=primary
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 11:02 /user/hive/warehouse/hive_assignments.db/car_insurance_multilevel_partitioned/education=secondary
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 11:02 /user/hive/warehouse/hive_assignments.db/car_insurance_multilevel_partitioned/education=tertiary

# Question 14: Create a bucketed table on 'Age', bucketed into 4 groups (as per the age groups mentioned above). Load data from the original table into this bucketed table.

Query:
-- To use Bucketing in hive, enable below property:
SET hive.enforce.bucketing = true;

CREATE TABLE car_insurance_cold_calls_bucketed
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
CLUSTERED BY (Age) INTO 4 BUCKETS
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ','
STORED AS TextFile
TBLPROPERTIES ("skip.header.line.count"="1");

-- Loading data into the car_insurance_cold_calls_bucketed table
INSERT OVERWRITE TABLE car_insurance_cold_calls_bucketed SELECT * FROM car_insurance_cold_calls;

Analysis:
-- We can see that in hive warehouse directory 4 buckets have been created on the basis of age.
aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed
Found 4 items
-rw-r--r--   2 aspiringde2306 hadoop      86042 2023-11-18 11:22 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed/000000_0
-rw-r--r--   2 aspiringde2306 hadoop      68722 2023-11-18 11:22 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed/000001_0
-rw-r--r--   2 aspiringde2306 hadoop      92220 2023-11-18 11:22 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed/000002_0
-rw-r--r--   2 aspiringde2306 hadoop     116620 2023-11-18 11:22 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed/000003_0

# Question 15: Add an additional partition on 'Job' to the partitioned table created earlier and move the data accordingly.

Query:
-- If we want to add an additional partition based on the 'Job' column to the existing partitioned table, we have to create new partitioned table and transfer the data. 
   Hive doesn't support altering the partitioning of existing tables. 

CREATE TABLE car_insurance_cold_calls_partitioned
(  id INT,
   Age INT,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
PARTITIONED BY (Education STRING, Marital STRING, Job STRING)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ','
STORED AS TextFile
TBLPROPERTIES ("skip.header.line.count"="1");

-- Loading data into the car_insurance_cold_calls_partitioned table
INSERT OVERWRITE TABLE car_insurance_cold_calls_partitioned PARTITION (Education, Marital, Job) 
SELECT 
  id, Age, Default, Balance, HHInsurance, CarLoan, Communication,
  LastContactDay, LastContactMonth, NoOfContacts, DaysPassed, PrevAttempts, Outcome,
  CallStart, CallEnd, CarInsurance, Education, Marital, Job
FROM car_insurance_multilevel_partitioned;

-- Loading process may be failed if it creates dynamic partitions beyond limits, we can resolve this error by configuring below two properties:
SET hive.exec.max.dynamic.partitions=200;
SET hive.exec.max.dynamic.partitions.pernode=200;

Analysis: 
-- We can observe that multi-level partioning has been occured in hive warehouse directory

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned
Found 4 items
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=NA
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=primary
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=tertiary

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary
Found 3 items
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=married
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=single

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced
Found 11 items
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=NA
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=admin.
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=blue-collar
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=entrepreneur
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=housemaid
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=management
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=retired
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=self-employed
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=services
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=technician
drwxr-xr-x   - aspiringde2306 hadoop          0 2023-11-18 13:05 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_partitioned/education=secondary/marital=divorced/job=unemployed

# Question 16: Increase the number of buckets in the bucketed table to 10 and redistribute the data.

Query: 
-- In Hive, once a table is bucketed, the allocated number of buckets remains fixed and cannot be altered. Bucketing is an immutable process that occurs during table creation. 
   To increase the number of buckets, a new table must be created with the desired bucket count, and data must be inserted from the existing table into the new one.

CREATE TABLE car_insurance_cold_calls_bucketed_new
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
CLUSTERED BY (Age) INTO 10 BUCKETS
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ','
STORED AS TextFile
TBLPROPERTIES ("skip.header.line.count"="1");

-- Loading data into the new car_insurance_cold_calls_bucketed_new table
INSERT OVERWRITE TABLE car_insurance_cold_calls_bucketed_new SELECT * FROM car_insurance_cold_calls_bucketed;

Analysis:
-- We can see that 10 new buckets have been created inside hive warehouse directory

aspiringde2306@hadoop-cluster-m:~$ hdfs dfs -ls /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new
Found 10 items
-rw-r--r--   2 aspiringde2306 hadoop      36610 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000000_0
-rw-r--r--   2 aspiringde2306 hadoop      45278 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000001_0
-rw-r--r--   2 aspiringde2306 hadoop      30246 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000002_0
-rw-r--r--   2 aspiringde2306 hadoop      21704 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000003_0
-rw-r--r--   2 aspiringde2306 hadoop      63282 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000004_0
-rw-r--r--   2 aspiringde2306 hadoop      76249 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000005_0
-rw-r--r--   2 aspiringde2306 hadoop       3812 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000006_0
-rw-r--r--   2 aspiringde2306 hadoop      24373 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000007_0
-rw-r--r--   2 aspiringde2306 hadoop      44142 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000008_0
-rw-r--r--   2 aspiringde2306 hadoop      17548 2023-11-18 13:16 /user/hive/warehouse/hive_assignments.db/car_insurance_cold_calls_bucketed_new/000009_0


Joins
-----

# Question 17: Join the original table with the partitioned table and find out the average 'Balance' for each 'Job' and 'Education' level

Query:
SELECT t1.Job, 
       t1.Education, 
       ROUND(AVG(t1.Balance),2 ) AS avg_balance
FROM car_insurance_cold_calls t1
INNER JOIN car_insurance_cold_calls_partitioned t2
ON t1.id = t2.id
GROUP BY t1.Job, t1.Education
ORDER BY avg_balance DESC;

Result:
| Job            | Education | Avg_Balance |
|----------------|-----------|-------------|
| technician     | NA        | 3446.17     |
| NA             | secondary | 2826.0      |
| technician     | primary   | 2720.36     |
| unemployed     | tertiary  | 2358.55     |
| retired        | primary   | 2288.46     |
| management     | tertiary  | 2214.81     |
| retired        | secondary | 2212.98     |
| services       | NA        | 2053.2      |
| retired        | tertiary  | 2046.41     |
| management     | primary   | 1936.89     |
| admin.         | NA        | 1878.36     |
| entrepreneur   | secondary | 1871.34     |
| self-employed  | tertiary  | 1854.0      |
| unemployed     | primary   | 1775.52     |
| student        | secondary | 1754.32     |
| management     | secondary | 1739.29     |
| entrepreneur   | primary   | 1692.09     |
| entrepreneur   | NA        | 1580.5      |
| technician     | tertiary  | 1521.26     |
| entrepreneur   | tertiary  | 1478.06     |
| housemaid      | NA        | 1473.0      |
| blue-collar    | tertiary  | 1469.8      |
| student        | tertiary  | 1445.1      |
| NA             | primary   | 1422.5      |
| blue-collar    | primary   | 1397.6      |
| blue-collar    | NA        | 1382.93     |
| self-employed  | NA        | 1273.4      |
| admin.         | secondary | 1265.64     |
| technician     | secondary | 1237.18     |
| management     | NA        | 1176.09     |
| self-employed  | secondary | 1105.67     |
| unemployed     | secondary | 1098.43     |
| blue-collar    | secondary | 1097.28     |
| services       | tertiary  | 1088.09     |
| retired        | NA        | 1029.18     |
| admin.         | tertiary  | 996.15      |
| unemployed     | NA        | 970.0       |
| NA             | NA        | 963.2       |
| services       | secondary | 837.94      |
| housemaid      | secondary | 833.5       |
| housemaid      | tertiary  | 830.15      |
| housemaid      | primary   | 817.74      |
| student        | NA        | 815.75      |
| student        | primary   | 701.67      |
| services       | primary   | 617.04      |
| self-employed  | primary   | 229.33      |
| admin.         | primary   | 52.88       |

Analysis:
-- Customers with the Job title 'Technician' have the highest average balance.
-- Among customers with the primary education, those with the Job title 'admin' have the lowest average balance.

# Question 18: Join the original table with the bucketed table and calculate the total 'NoOfContacts' for each 'Age' group.

Query:
SELECT t1.Age,  
       SUM(t1.NoOfContacts) AS total_num_contacts
FROM car_insurance_cold_calls t1
INNER JOIN car_insurance_cold_calls_bucketed_new t2
ON t1.id = t2.id
GROUP BY t1.Age;

Result:
| t1.age | total_num_contacts |
|--------|---------------------|
| 18     | 7                   |
| 19     | 35                  |
| 20     | 13                  |
| 21     | 22                  |
| 22     | 49                  |
| 23     | 38                  |
| 24     | 56                  |
| 25     | 118                 |
| 26     | 149                 |
| 27     | 187                 |
| 28     | 224                 |
| 29     | 266                 |
| 30     | 388                 |
| 31     | 526                 |
| 32     | 435                 |
| 33     | 416                 |
| 34     | 364                 |
| 35     | 419                 |
| 36     | 379                 |
| 37     | 343                 |
| 38     | 430                 |
| 39     | 286                 |
| 40     | 277                 |
| 41     | 246                 |
| 42     | 303                 |
| 43     | 273                 |
| 44     | 274                 |
| 45     | 303                 |
| 46     | 292                 |
| 47     | 257                 |
| 48     | 238                 |
| 49     | 242                 |
| 50     | 164                 |
| 51     | 259                 |
| 52     | 273                 |
| 53     | 181                 |
| 54     | 189                 |
| 55     | 138                 |
| 56     | 191                 |
| 57     | 204                 |
| 58     | 240                 |
| 59     | 187                 |
| 60     | 145                 |
| 61     | 49                  |
| 62     | 26                  |
| 63     | 27                  |
| 64     | 23                  |
| 65     | 10                  |
| 66     | 9                   |
| 67     | 18                  |
| 68     | 7                   |
| 69     | 20                  |
| 70     | 10                  |
| 71     | 6                   |
| 72     | 24                  |
| 73     | 14                  |
| 75     | 12                  |
| 76     | 10                  |
| 77     | 16                  |
| 78     | 8                   |
| 79     | 10                  |
| 80     | 18                  |
| 81     | 4                   |
| 82     | 5                   |
| 83     | 11                  |
| 84     | 3                   |
| 86     | 2                   |
| 87     | 1                   |
| 95     | 17                  |

Analysis:
-- Customers whose age lies between 31-35 had received highest number of calls.
-- Customers whose age is beyond 60 years or retired professionals had received fewer calls during the campaign. 

# Question 19: Join the partitioned table and the bucketed table based on the 'Id' field and find the total balance for each education level and marital status for each age group.

Query: 
SELECT t1.Age, 
       t1.Education, 
       t1.Marital,
       SUM(t1.balance) AS total_balance
FROM car_insurance_cold_calls_partitioned t1
INNER JOIN car_insurance_cold_calls_bucketed_new t2
ON t1.id = t2.id
GROUP BY t1.Age, t1.Education, t1.Marital;

Result:
-- These are top 5 records with respect to total balance
| t1.age | t1.education | t1.marital | total_balance |
|--------|--------------|------------|---------------|
| 31     | tertiary     | single     | 142760        |
| 48     | secondary    | married    | 125022        |
| 34     | tertiary     | single     | 112052        |
| 59     | tertiary     | married    | 111772        |
| 32     | tertiary     | single     | 93036         |


-- These are bottom 5 records with respect to total balance 
| t1.age | t1.education | t1.marital | total_balance |
|--------|--------------|------------|---------------|
| 31     | secondary    | divorced   | -1481         |
| 30     | primary      | married    | -481          |
| 22     | secondary    | married    | -295          |
| 26     | NA           | married    | -277          |
| 52     | primary      | divorced   | -249          |


Analysis:
-- Customers who are in their early 30s, specifically 31 and 32 years old, and are single with tertiary education have significantly high total balances, exceeding 90,000.
-- Customers in their early 30s or mid-20s, either married or divorced, and with less qualification (secondary, primary) tend to have negative total balances.


Window Function
---------------

# Question 20: Calculate the cumulative sum of 'NoOfContacts' for each 'Job' category, ordered by 'Age'?

Query:
-- retrieving only first 30 records
SELECT Job, 
       Age, 
       NoOfContacts,
       SUM(NoOfContacts) OVER(PARTITION BY Job ORDER BY Age) AS cumulative_sum
FROM car_insurance_cold_calls
ORDER BY Age DESC, Job LIMIT 30;

Result:
| Job         | Age | NoOfContacts | Cumulative_Sum |
|-------------|-----|--------------|-----------------|
| retired     | 95  | 17           | 522             |
| retired     | 92  | 3            | 505             |
| retired     | 87  | 1            | 502             |
| retired     | 86  | 1            | 501             |
| retired     | 86  | 1            | 501             |
| retired     | 84  | 3            | 499             |
| retired     | 83  | 10           | 496             |
| retired     | 83  | 1            | 496             |
| retired     | 82  | 3            | 485             |
| retired     | 82  | 2            | 485             |
| retired     | 81  | 1            | 480             |
| retired     | 81  | 1            | 480             |
| retired     | 81  | 2            | 480             |
| housemaid   | 80  | 1            | 334             |
| retired     | 80  | 2            | 476             |
| retired     | 80  | 3            | 476             |
| retired     | 80  | 8            | 476             |
| retired     | 80  | 1            | 476             |
| retired     | 80  | 1            | 476             |
| retired     | 80  | 1            | 476             |
| retired     | 80  | 3            | 476             |
| retired     | 80  | 1            | 476             |
| retired     | 79  | 2            | 456             |
| retired     | 79  | 5            | 456             |
| retired     | 79  | 3            | 456             |
| NA          | 78  | 3            | 44              |
| retired     | 78  | 3            | 446             |
| retired     | 78  | 1            | 446             |
| retired     | 78  | 1            | 446             |
| management  | 77  | 2            | 2529            |


Analysis:
-- Notably, retired individuals, especially those aged 80 and above, received a significant number of contacts.

# Question 21: Calculate the running average of 'Balance' for each 'Job' category, ordered by 'Age'.

Query: 
SELECT DISTINCT(Age),
       Job,
       ROUND(AVG(Balance) OVER(PARTITION BY Job ORDER BY Age),2) AS running_avg_balance
FROM car_insurance_cold_calls
ORDER BY Job;

Analysis:
-- Except customers with Job Title 'Admin', every Job category, running average balance is showing mix trend(increasing/decreasing) as Customer age increases.
-- For Customers with Job Title 'Admin', running average balance increases as the Customer Age increases. It suggests a positive correlation between age and running average balance for these customers.

# Question 22: Calculate the rank of 'Balance' within each 'Job' category, ordered by 'Balance' descending.

SELECT Job,
       RANK() OVER(ORDER BY AVG(Balance) DESC) AS balance_rank
FROM car_insurance_cold_calls
GROUP BY Job;

Result:
| Job           | Balance Rank |
|---------------|--------------|
| retired       | 1            |
| management    | 2            |
| self-employed | 3            |
| entrepreneur  | 4            |
| unemployed    | 5            |
| student       | 6            |
| technician    | 7            |
| blue-collar   | 8            |
| admin.        | 9            |
| NA            | 10           |
| housemaid     | 11           |
| services      | 12           |

Analysis:
-- Based on the analysis, retired customers tend to have the highest average balance, while customers working in services have the lowest average balance among the job categories.


Advanced Aggregations
---------------------

# Question 22: Find the job category with the highest number of car insurances.

Query:
SELECT Job, 
       COUNT(CarInsurance) AS total_car_insurances
FROM car_insurance_cold_calls
WHERE CarInsurance = 1
GROUP BY Job
ORDER BY total_car_insurances DESC LIMIT 1;

Result:
| Job           | Total Car Insurances |
|---------------|----------------------|
| management    | 392                  |

Analysis:
-- Management professionals bought the highest number of car insurances.

# Question 23: Which month has seen the highest number of last contacts?

Query:
SELECT LastContactMonth, 
       SUM(NoOfContacts) AS monthly_contacts
FROM car_insurance_cold_callS
GROUP BY LastContactMonth
ORDER BY monthly_contacts DESC LIMIT 1;

Result:
| Last Contact Month | Monthly Contacts   |
|-------------------- |-------------------|
| May                | 2416               |

Analysis:
-- The highest number of last contacts were seen in May.

# Question 24: Calculate the ratio of the number of customers with car insurance to the number of customers without car insurance for each job category.

Query:
SELECT Job,
       SUM(CASE WHEN CarInsurance = 1 THEN 1 ELSE 0 END)/ SUM(CASE WHEN CarInsurance = 0 THEN 1 ELSE 0 END) AS ratio
FROM car_insurance_cold_calls
GROUP BY Job;

Result:
| Job            | ratio            |
|----------------|------------------|
| NA             | 0.9              |
| admin.         | 0.68             |
| blue-collar    | 0.41             |
| entrepreneur   | 0.41             |
| housemaid      | 0.51             |
| management     | 0.78             |
| retired        | 1.42             |
| self-employed  | 0.63             |
| services       | 0.51             |
| student        | 1.98             |
| technician     | 0.63             |
| unemployed     | 1.32             |

Analysis:
-- Ratio is highest for retired professionals, it means mumber of retired professionals who bought car insurance are higher than those who did not.

# Question 25: Find out the 'Job' and 'Education' level combination which has the highest number of car insurances.

Query:
SELECT Job,
       Education,
       COUNT(CarInsurance) AS total_car_insurances
FROM car_insurance_cold_calls
WHERE CarInsurance = 1
GROUP BY Job, Education
ORDER BY total_car_insurances DESC LIMIT 1;

Result:
| Job         | Education | Total Car Insurances |
|-------------|-----------|----------------------|
| Management  | Tertiary  | 337                  |

Analysis:
-- Highly qualified management professionals bought the highest number of car insurances.

# Question 26:  Calculate the average 'NoOfContacts' for each 'Outcome' and 'Job' combination.

Query:
SELECT Job,
       Outcome,
       ROUND(AVG(NoOfContacts), 2) AS avg_num_contacts
FROM car_insurance_cold_calls
GROUP BY Outcome, Job
ORDER BY avg_num_contacts DESC;

Result:
| Job         | Outcome | Avg Num Contacts |
|-------------|---------|------------------|
| Housemaid   | NA      | 3.18             |
| Management  | NA      | 3.13             |
| Technician  | NA      | 3.03             |
| Entrepreneur| NA      | 3.00             |
| Blue-collar | NA      | 2.91             |
| Services    | Other   | 2.82             |
| NA          | NA      | 2.79             |
| Self-employed| NA     | 2.77             |
| Housemaid   | Failure | 2.67             |
| Self-employed| Other  | 2.63             |
| Services    | NA      | 2.61             |
| Entrepreneur| Success | 2.50             |
| Technician  | Other   | 2.43             |
| Admin.      | NA      | 2.41             |
| Management  | Other   | 2.30             |
| Student     | Failure | 2.27             |
| Retired     | Failure | 2.25             |
| Unemployed  | NA      | 2.23             |
| Retired     | NA      | 2.21             |
| Technician  | Success | 2.16             |
| Student     | NA      | 2.16             |
| Admin.      | Other   | 2.10             |
| Blue-collar | Other   | 2.07             |
| Student     | Other   | 2.07             |
| Unemployed  | Failure | 2.06             |
| Management  | Failure | 2.02             |
| Housemaid   | Other   | 2.00             |
| Entrepreneur| Other   | 2.00             |
| Technician  | Failure | 1.97             |
| Management  | Success | 1.96             |
| Retired     | Other   | 1.91             |
| Self-employed| Success| 1.91             |
| Services    | Failure | 1.87             |
| Entrepreneur| Failure | 1.85             |
| Blue-collar | Failure | 1.84             |
| Student     | Success | 1.72             |
| Unemployed  | Other   | 1.67             |
| Unemployed  | Success | 1.67             |
| Admin.      | Success | 1.64             |
| Retired     | Success | 1.60             |
| Self-employed| Failure| 1.56             |
| Admin.      | Failure | 1.54             |
| Housemaid   | Success | 1.50             |
| Services    | Success | 1.45             |
| Blue-collar | Success | 1.39             |

Analysis:
-- The data suggests that individuals with job titles such as housemaid, management, technician, and entrepreneur received an average of 3 calls. 
   It's notable that in all cases, the outcome of the calls is unavailable.

# Question 27. Determine the month with the highest total 'Balance' of customers.

Query:
SELECT LastContactMonth AS Month
       SUM(Balance) AS total_monthly_balance
FROM car_insurance_cold_calls
GROUP BY LastContactMonth
ORDER BY total_monthly_balance DESC LIMIT 1; 

Result:
|         Month      | Total Monthly Balance |
|--------------------|------------------------|
| May                | 1,175,862              |

Analysis:
-- Total balance of all the customers was highest in the May.

# Question 28: For customers who have both a car loan and home insurance, find out the average 'Balance' for each 'Education' level

Query:
SELECT Education,
       ROUND(AVG(Balance),2) AS avg_balance
FROM car_insurance_cold_calls
WHERE (CarLoan = 1) AND (HHInsurance = 1)
GROUP BY Education;

Result:
| Education | Average Balance |
|------------|------------------|
| NA         | 1,258.45         |
| Primary    | 589.55           |
| Secondary  | 688.1            |
| Tertiary   | 1,163.12         |

Analysis:
-- Setting aside instances where education information is not available, the data indicates that individuals with higher qualifications, including both car loans and home insurance, 
   exhibit the highest average balance."

# Question 29: Identify the top 3 'Communication' types for customers with 'CarInsurance', and display their average 'NoOfContacts'.

Query:
SELECT Communication, 
       ROUND(AVG(NoOfContacts),2) AS avg_num_contacts
FROM car_insurance_cold_calls
WHERE CarInsurance = 1
GROUP BY Communication
ORDER BY avg_num_contacts DESC LIMIT 3;

Result:
| Communication  | avg_num_contacts            |
|----------------|-----------------------------|
| telephone      | 2.72                        |
| NA             | 2.34                        |
| cellular       | 2.11                        |

Analysis:
-- Telephone communication emerged as preferred mode of communication for customers with CarInsurance.

# Question 30: For customers who have a car loan, calculate the average balance for each job category.

Query:
SELECT Job,
       ROUND(AVG(Balance)) AS avg_balance
FROM car_insurance_cold_calls
WHERE CarLoan = 1
GROUP BY Job;

Result:
| job           | avg_balance |
|---------------|-------------|
| NA            | 1522.0      |
| admin.        | 762.0       |
| blue-collar   | 788.0       |
| entrepreneur  | 845.0       |
| housemaid     | 462.0       |
| management    | 1337.0      |
| retired       | 806.0       |
| self-employed | 163.0       |
| services      | 511.0       |
| student       | 486.0       |
| technician    | 624.0       |
| unemployed    | 308.0       |

Analysis
-- Setting aside instances where education information is not available, Average balance is the highest for management professionals and lowest for self-employed professionals having car loan.

# Question 31: Identify the top 5 job categories that have the most customers with a 'default', and show their average 'balance'.

Query:
SELECT Job,
       COUNT(Default) AS defaulted_customers,
       ROUND(AVG(Balance), 2) AS avg_balance
FROM car_insurance_cold_calls 
WHERE Default = 1
GROUP BY Job
ORDER BY defaulted_customers DESC LIMIT 5;

Result:
| job           | defaulted_customers | avg_balance |
|---------------|----------------------|-------------|
| blue-collar   | 18                   | -44.89      |
| management    | 14                   | 18.79       |
| technician    | 9                    | -65.33      |
| entrepreneur  | 3                    | -153.67     |
| housemaid     | 3                    | 410.67      |

Analysis:
-- Top 5 categories which have the most defaulted customers are blue-collar, management, technician, entrepreneur, housemaid. 
   Four out of the five categories have negative average balances, indicating a higher likelihood of defaulting.


Advanced Window Functions
-------------------------

# Question 32: Calculate the difference in 'NoOfContacts' between each customer and the customer with the next highest number of contacts in the same 'Job' category.

Query:
SELECT Job,
       Id AS customer_id,
       NoOfContacts,
       ((LEAD(NoOfContacts, 1) OVER(PARTITION BY Job ORDER BY NoOfContacts)) - NoOfContacts) AS diff
FROM car_insurance_cold_calls;

Result:
-- As there are 4000 records in the dataset, displaying only some records, choosen randomly from the output.

| Job            |  customer_id           | NoOfContacts     |    diff              |
|----------------|-----------------------|-------------------|----------------------|
| services       | 3259                  | 5                 | 0                    |
| services       | 1232                  | 5                 | 0                    |
| services       | 910                   | 5                 | 0                    |
| services       | 2142                  | 5                 | 0                    |
| services       | 3879                  | 5                 | 0                    |
| services       | 268                   | 5                 | 0                    |
| services       | 3053                  | 5                 | 0                    |
| services       | 2635                  | 5                 | 0                    |
| services       | 3300                  | 5                 | 0                    |
| services       | 1723                  | 5                 | 0                    |
| services       | 1165                  | 5                 | 0                    |
| services       | 2934                  | 5                 | 0                    |
| services       | 1482                  | 5                 | 0                    |
| services       | 3947                  | 5                 | 1                    |
| services       | 2542                  | 6                 | 0                    |
| services       | 2288                  | 6                 | 0                    |
| services       | 1899                  | 6                 | 0                    |
| services       | 2024                  | 6                 | 0                    |
| services       | 2617                  | 6                 | 0                    |
| services       | 3241                  | 6                 | 0                    |
| services       | 2133                  | 6                 | 1                    |
| services       | 1459                  | 7                 | 0                    |
| services       | 2101                  | 7                 | 0                    |
| services       | 2897                  | 7                 | 0                    |
| services       | 1876                  | 7                 | 1                    |
| services       | 689                   | 8                 | 0                    |
| services       | 15                    | 8                 | 0                    |
| services       | 1047                  | 8                 | 1                    |
| services       | 3659                  | 9                 | 0                    |
| services       | 2613                  | 9                 | 4                    |
| services       | 905                   | 13                | 1                    |
| services       | 610                   | 14                | 3                    |
| services       | 2432                  | 17                | 8                    |
| services       | 2944                  | 25                | 9                    |
| services       | 366                   | 34                | NULL                 |
| student        | 3874                  | 1                 | 0                    |
| student        | 805                   | 1                 | 0                    |
| student        | 1891                  | 1                 | 0                    |
| student        | 193                   | 1                 | 0                    |
| student        | 3932                  | 1                 | 0                    |
| student        | 879                   | 1                 | 0                    |
| student        | 471                   | 1                 | 0                    |
| student        | 3423                  | 1                 | 0                    |
| student        | 3062                  | 1                 | 0                    |
| student        | 885                   | 1                 | 0                    |
| student        | 2921                  | 1                 | 0                    |
| student        | 797                   | 1                 | 0                    |
| student        | 2423                  | 1                 | 0                    |
| student        | 1128                  | 1                 | 0                    |
| student        | 2417                  | 1                 | 0                    |
| student        | 2545                  | 1                 | 0                    |
| student        | 2414                  | 1                 | 0                    |
| student        | 362                   | 1                 | 0                    |
| student        | 1832                  | 1                 | 0                    |
| student        | 2401                  | 1                 | 0                    |
| student        | 63                    | 1                 | 0                    |
| student        | 3434                  | 1                 | 0                    |
| student        | 1150                  | 1                 | 0                    |
| student        | 2894                  | 1                 | 0                    |
| student        | 2579                  | 1                 | 0                    |
| student        | 497                   | 1                 | 0                    |
| student        | 2380                  | 1                 | 0                    |
| student        | 1058                  | 1                 | 0                    |
| student        | 3196                  | 1                 | 0                    |
| student        | 1168                  | 1                 | 0                    |
| student        | 2367                  | 1                 | 0                    |
| student        | 3033                  | 1                 | 0                    |
| student        | 2351                  | 1                 | 0                    |
| student        | 667                   | 1                 | 0                    |
| student        | 3029                  | 1                 | 0                    |
| student        | 1191                  | 1                 | 0                    |
| student        | 1871                  | 1                 | 0                    |
| student        | 2314                  | 1                 | 0                    |
| student        | 228                   | 1                 | 0                    |
| student        | 297                   | 1                 | 0                    |
| student        | 612                   | 1                 | 0                    |
| student        | 3117                  | 1                 | 0                    |
| student        | 3660                  | 1                 | 0                    |
| student        | 2281                  | 1                 | 0                    |
| student        | 3829                  | 1                 | 0                    |
| student        | 2733                  | 1                 | 0                    |
| student        | 926                   | 1                 | 0                    |
| student        | 3012                  | 1                 | 0                    |
| student        | 1591                  | 1                 | 0                    |
| student        | 2723                  | 1                 | 0                    |
| student        | 308                   | 1                 | 0                    |
| student        | 1413                  | 1                 | 0                    |
| student        | 3794                  | 1                 | 0                    |
| student        | 1567                  | 1                 | 0                    |
| student        | 3708                  | 1                 | 0                   


# Question 33: For each customer, calculate the difference between their 'balance' and the average 'balance' of their 'job' category

Query:
SELECT Job,
       Id AS customer_id,
       ROUND(ABS(Balance - AVG(Balance) OVER(PARTITION BY Job)), 2) AS diff_btw_blnc_and_avg_blnc
FROM car_insurance_cold_calls;

Result:
-- As there are 4000 records in the dataset, displaying only some records, choosen randomly from the output.

| Job          | CustomerID | diff_Between_Balance_and_Avg_Balance |
|--------------|------------|----------------------------------------|
| blue-collar  | 1438       | 183.04                                 |
| blue-collar  | 2459       | 1216.96                                |
| blue-collar  | 2458       | 2014.04                                |
| blue-collar  | 1445       | 255.04                                 |
| blue-collar  | 3674       | 2405.04                                |
| blue-collar  | 1449       | 862.96                                 |
| blue-collar  | 1451       | 1215.96                                |
| blue-collar  | 2447       | 772.96                                 |
| blue-collar  | 35         | 481.04                                 |
| blue-collar  | 2443       | 1634.04                                |
| blue-collar  | 2440       | 104.96                                 |
| blue-collar  | 36         | 916.96                                 |
| blue-collar  | 1466       | 374.96                                 |
| blue-collar  | 2438       | 1066.96                                |
| entrepreneur | 1067       | 9901.85                                |
| entrepreneur | 3193       | 25934.85                               |
| entrepreneur | 745        | 1588.15                                |
| entrepreneur | 3200       | 3872.85                                |
| entrepreneur | 1239       | 1511.15                                |
| entrepreneur | 1664       | 2094.15                                |
| entrepreneur | 734        | 1061.15                                |
| entrepreneur | 3205       | 1689.15                                |
| entrepreneur | 3727       | 1301.15                                |
| entrepreneur | 722        | 743.15                                 |
| entrepreneur | 1978       | 1214.15                                |
| entrepreneur | 1140       | 1999.85                                |
| entrepreneur | 123        | 641.85                                 |
| entrepreneur | 1016       | 1347.85                                |
| entrepreneur | 2782       | 1391.15                                |
| entrepreneur | 674        | 1096.15                                |
| entrepreneur | 1663       | 1398.15                                |
| entrepreneur | 1146       | 957.15                                 |
| entrepreneur | 1885       | 1549.15                                |
| entrepreneur | 2085       | 982.15                                 |
| entrepreneur | 2881       | 1552.15                                |
| entrepreneur | 846        | 1606.15                                |
| entrepreneur | 1151       | 1889.15                                |
| entrepreneur | 2267       | 4112.85                                |
| entrepreneur | 1988       | 1376.15                                |
| entrepreneur | 1929       | 4148.85                                |
| entrepreneur | 3505       | 1342.15                                |
| entrepreneur | 290        | 1689.15                                |
| entrepreneur | 845        | 1660.15                                |
| entrepreneur | 210        | 6801.85                                |
| entrepreneur | 1820       | 1029.15                                |
| entrepreneur | 3001       | 1370.15                                |
| entrepreneur | 1161       | 1723.15                                |
| entrepreneur | 1343       | 9842.85                                |
| entrepreneur | 265        | 927.15                                 |
| entrepreneur | 1661       | 1711.15                                |
| entrepreneur | 3999       | 1031.15                                |
| entrepreneur | 470        | 1234.15                                |
| entrepreneur | 1083       | 1811.15                                |
| entrepreneur | 1084       | 1585.15                                |
| entrepreneur | 3311       | 1773.85                                |
| entrepreneur | 611        | 604.15                                 |
| entrepreneur | 1796       | 371.15                                 |
| entrepreneur | 62         | 10197.85                               |
| entrepreneur | 2873       | 1011.15                                |
| entrepreneur | 2745       | 1038.15                                |
| entrepreneur | 3953       | 1689.15                                |
| entrepreneur | 1719       | 1627.15                                |


# Question 34: For each 'Job' category, find the customer who had the longest call duration.

Query:
WITH cte AS 
(SELECT Job, 
        Id,
        from_unixtime((unix_timestamp(CallEnd, 'HH:MM:SS') - unix_timestamp(CallStart, 'HH:MM:SS')), 'HH:MM:SS') AS call_duration,
        MAX(from_unixtime((unix_timestamp(CallEnd, 'HH:MM:SS') - unix_timestamp(CallStart, 'HH:MM:SS')), 'HH:MM:SS')) OVER(PARTITION BY Job) AS longest_call_duration
FROM car_insurance_cold_calls)

SELECT *
FROM cte
WHERE call_duration = longest_call_duration;

Result:
| cte.job         | cte.id  | cte.call_duration   | cte.longest_call_duration |
| --------------- | ------ | ------------------ | ------------------------- |
| NA              | 2169   | 23:05:00           | 23:05:00                  |
| admin.          | 2327   | 23:03:00           | 23:03:00                  |
| admin.          | 7      | 23:03:00           | 23:03:00                  |
| admin.          | 2681   | 23:03:00           | 23:03:00                  |
| admin.          | 1697   | 23:03:00           | 23:03:00                  |
| blue-collar     | 92     | 23:12:00           | 23:12:00                  |
| blue-collar     | 908    | 23:12:00           | 23:12:00                  |
| blue-collar     | 2653   | 23:12:00           | 23:12:00                  |
| blue-collar     | 2647   | 23:12:00           | 23:12:00                  |
| entrepreneur    | 1084   | 01:12:00           | 01:12:00                  |
| housemaid       | 2657   | 23:03:00           | 23:03:00                  |
| management      | 47     | 23:12:00           | 23:12:00                  |
| retired         | 962    | 23:08:00           | 23:08:00                  |
| self-employed   | 1281   | 01:10:00           | 01:10:00                  |
| services        | 628    | 23:07:00           | 23:07:00                  |
| services        | 2214   | 23:07:00           | 23:07:00                  |
| student         | 1150   | 23:03:00           | 23:03:00                  |
| technician      | 585    | 23:12:00           | 23:12:00                  |
| unemployed      | 1846   | 23:03:00           | 23:03:00                  |
| unemployed      | 626    | 23:03:00           | 23:03:00                  |

Analysis:
-- In some job categories like "admin," "blue-collar," "services," and "unemployed," there are multiple customers with the longest call duration.
-- In other job categories such as "housemaid," "management," "retired," "entrepreneur," "self-employed," "student," and "technician," there is only a single customer with the longest call duration.

# Question 35: Calculate the moving average of 'NoOfContacts' within each 'Job' category, using a window frame of the current row and the two preceding rows.

Query:
SELECT Job,
       NoOfContacts,
       ROUND(AVG(NoOfContacts) OVER(PARTITION BY Job ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS moving_average
FROM car_insurance_cold_calls;

Result:
--  As the output is returning 1000s of rows, for demonstration I took the service professionals from the output.

|    job   | noofcontacts | moving_average |
|----------|--------------|-----------------|
| services |      1       |       1.0       |
| services |      8       |       4.5       |
| services |      3       |       4.0       |
| services |      1       |       4.0       |
| services |      3       |      2.33       |
| services |      2       |       2.0       |
| services |      4       |       3.0       |
| services |      2       |      2.67       |
| services |      2       |      2.67       |
| services |      4       |      2.67       |
| services |      1       |      2.33       |
| services |      3       |      2.67       |
| services |      1       |      1.67       |
| services |      2       |       2.0       |
| services |      1       |      1.33       |
| services |      3       |       2.0       |
| services |      1       |      1.67       |
| services |      4       |      2.67       |
| services |      2       |      2.33       |
| services |      1       |      2.33       |
| services |      2       |      1.67       |
| services |      2       |      1.67       |
| services |      5       |       3.0       |
| services |      1       |      2.67       |
| services |      2       |      2.67       |
| services |      2       |      1.67       |
| services |      1       |      1.67       |
| services |      1       |      1.33       |
| services |      1       |       1.0       |
| services |      3       |      1.67       |
| services |      2       |       2.0       |
| services |      2       |      2.33       |
| services |      34      |      12.67      |
| services |      1       |      12.33      |
| services |      2       |      12.33      |
| services |      1       |      1.33       |
| services |      1       |      1.33       |
| services |      3       |      1.67       |
| services |      3       |      2.33       |
| services |      2       |      2.67       |
| services |      2       |       2.0       |
| services |      1       |      1.67       |
| services |      3       |       2.0       |
| services |      1       |      1.67       |
| services |      3       |      2.33       |
| services |      2       |       2.0       |
| services |      4       |       3.0       |
| services |      2       |      2.67       |
| services |      14      |      6.67       |
| services |      1       |      5.67       |
| services |      1       |      5.33       |
| services |      3       |      1.67       |
| services |      1       |      1.67       |
| services |      1       |      1.67       |
| services |      1       |       1.0       |
| services |      8       |      3.33       |
| services |      1       |      3.33       |
| services |      1       |      3.33       |
| services |      2       |      1.33       |
| services |      2       |      1.67       |
| services |      1       |      1.67       |
| services |      1       |      1.33       |
| services |      2       |      1.33       |
| services |      3       |       2.0       |
| services |      1       |       2.0       |
| services |      1       |      1.67       |
| services |      1       |       1.0       |
| services |      3       |      1.67       |
| services |      13      |      5.67       |
| services |      4       |      6.67       |
| services |      4       |       7.0       |
| services |      5       |      4.33       |
| services |      2       |      3.67       |
| services |      1       |      2.67       |
| services |      2       |      1.67       |

Analysis:
- Moving average indicates that three day average of number of contacts is not consistently increasing or decreasing, showing a mix trend.


Performance Tuning
------------------

# Question 36: Experiment with different file formats (like ORC, Parquet) and measure their impact on the performance of your Hive queries.

Query:

-- Creating a Hive Table that will use the ORC File format.

CREATE TABLE car_insurance_orc
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
STORED AS orc
TBLPROPERTIES ("skip.header.line.count"="1");

-- Creating a Hive Table that will use the Parquet File format.

CREATE TABLE car_insurance_parquet
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
STORED AS parquet
TBLPROPERTIES ("skip.header.line.count"="1");

-- Loading the data into the car_insurance_orc and car_insurance_parquet from original (car_insurance_cold_calls) table

INSERT OVERWRITE TABLE car_insurance_orc SELECT * FROM car_insurance_cold_calls;
INSERT OVERWRITE TABLE car_insurance_parquet SELECT * FROM car_insurance_cold_calls;

-- Writing simple select queries to analyse the execution time from three different file formats (text file, orc, parquet):

SELECT * FROM car_insurance_cold_calls; -- Time taken: 0.314 seconds, Fetched: 18086 row(s)

SELECT * FROM car_insurance_orc; -- Time taken: 0.251 seconds, Fetched: 18085 row(s)

SELECT * FROM car_insurance_parquet; -- Time taken: 0.193 seconds, Fetched: 18085 row(s)

-- Checking the total size of each file format in Hive:

Original file size = 360 KB

DESCRIBE FORMATTED car_insurance_cold_calls; -- totalsize = 367792 bytes or 360 KB

DESCRIBE FORMATTED car_insurance_orc; -- totalsize = 103068 bytes or 100 KB

DESCRIBE FORMATTED car_insurance_parquet; -- totalsize = 252655 bytes or 247 KB

Analysis:
-- The observed execution times for your select queries suggest that Parquet is the fastest, followed by ORC, and then the text file format.
-- Although the file size is small, but this general observation aligns with the characteristics of these file formats.
-- The ORC file format seems to be the most space-efficient in this scenario, followed by Parquet and then the conventional text file format (car_insurance_cold_calls). 
   Smaller file sizes can lead to more efficient storage and potentially faster query performance.

# Question 37: Use different levels of compression and observe their effects on storage and query performance.

Query:
-- Creating a Hive Table that will use Parquet file format with SNAPPY compression

CREATE TABLE car_insurance_parquet_cmprsd_snappy
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
STORED AS parquet
TBLPROPERTIES ("skip.header.line.count"="1", "parquet.compress"="SNAPPY");

-- Creating a Hive Table that will use Parquet file format with GZIP compression

CREATE TABLE car_insurance_parquet_cmprsd_gzip
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
STORED AS parquet
TBLPROPERTIES ("skip.header.line.count"="1", "parquet.compress"="GZIP");

-- Creating a Hive Table that will use Parquet file format with LZO compression

CREATE TABLE car_insurance_parquet_cmprsd_lzo
(  id INT,
   Age INT,
   Job STRING,
   Marital STRING,
   Education STRING,
   Default INT,
   Balance INT,
   HHInsurance INT,
   CarLoan INT,
   Communication STRING,
   LastContactDay INT,
   LastContactMonth STRING,
   NoOfContacts INT,
   DaysPassed INT,
   PrevAttempts INT,
   Outcome STRING,
   CallStart STRING,
   CallEnd STRING,
   CarInsurance INT
)
STORED AS parquet
TBLPROPERTIES ("skip.header.line.count"="1", "parquet.compress"="LZO");


-- Loading data into the tables created with different compression formats

INSERT OVERWRITE TABLE car_insurance_parquet_cmprsd_snappy SELECT * FROM car_insurance_cold_calls;
INSERT OVERWRITE TABLE car_insurance_parquet_cmprsd_gzip SELECT * FROM car_insurance_cold_calls;
INSERT OVERWRITE TABLE car_insurance_parquet_cmprsd_lzo SELECT * FROM car_insurance_cold_calls;

-- Writing simple SELECT queries to analyse effect of different compression formats on query performance:

SELECT * FROM car_insurance_parquet_cmprsd_snappy WHERE CarInsurance = 0; -- Time taken: 23.109 seconds, Fetched: 1165 row(s)

SELECT * FROM car_insurance_parquet_cmprsd_gzip WHERE CarInsurance = 0; -- Time taken: 10.082 seconds, Fetched: 1165 row(s)

SELECT * FROM car_insurance_parquet_cmprsd_lzo WHERE CarInsurance = 0; -- Time taken: 10.84 seconds, Fetched: 1165 row(s)

-- Checking total size for each compression format in Hive:

Original file size = 360 KB

DESCRIBE FORMATTED car_insurance_parquet_cmprsd_snappy; -- total size = 252665 bytes OR 246.75 KB

DESCRIBE FORMATTED car_insurance_parquet_cmprsd_gzip; -- total size = 252665 bytes OR 246.75 KB

DESCRIBE FORMATTED car_insurance_parquet_cmprsd_lzo; -- total size = 252665 bytes OR 246.75 KB

Analysis:
-- In terms of Storage, all compression formats such as SNAPPY, GZIP, LZO used with PARQUET format gave same level of compression.
-- In terms of Query Performance, the order of query execution time is as follows: GZIP < LZO < SNAPPY. It means the most efficient compression format is GZIP, followed by LZO and then SNAPPY.














